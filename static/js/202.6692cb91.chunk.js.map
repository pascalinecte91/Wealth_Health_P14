{"version":3,"file":"static/js/202.6692cb91.chunk.js","mappings":"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","sources":["data/column.js","components/pagination/Pagination.js","components/search/EmployeeSearch.js","components/customDataTable/dataTableStyles.js","pages/listEmployees/ListEmployees.jsx","redux/actions.js"],"sourcesContent":["\r\nexport const columns = [\r\n  /**\r\n   * Colonne du prénom.  (Les commentaires pour les autres colonnes suivent le même modèle)\r\n   * @type {object}\r\n   * @property {string} name - Le nom de la colonne (\"First Name\").\r\n   * @property {function} selector - Fonction pour extraire la valeur de la colonne à partir de la ligne.\r\n   * @property {boolean} sortable - Indique si la colonne est triable.\r\n   * @property {function} sortFunction - Fonction de tri personnalisée pour trier les valeurs de la colonne.\r\n   * @property {function} cell - Fonction pour afficher le contenu de la cellule de la colonne.\r\n   */\r\n  {\r\n    name: \"First Name\",\r\n    selector: (row) => row.firstName,\r\n    sortable: true,\r\n    sortFunction: (a, b) => a.firstName.localeCompare(b.firstName),\r\n    cell: (row) => (\r\n      <span>\r\n        {row.firstName.charAt(0).toUpperCase() + row.firstName.slice(1)}\r\n      </span>\r\n    ),\r\n  },\r\n  {\r\n    name: \"Last Name\",\r\n    selector: (row) => row.lastName,\r\n    sortable: true,\r\n    sortFunction: (a, b) => a.lastName.localeCompare(b.lastName),\r\n  },\r\n  {\r\n    name: \"Start Date\",\r\n    selector: (row) => row.startDate,\r\n    sortable: true,\r\n    sortFunction: (a, b) => {\r\n      //La méthode join est  utilisée pour transformer le tableau en une chaîne de caractères\r\n      //au format compatible Date de JavaScript, qui permet de créer un objet Date\r\n      const dateA = a.startDate.split(\"/\").reverse().join(\"-\");\r\n      const dateB = b.startDate.split(\"/\").reverse().join(\"-\");\r\n      return new Date(dateA) - new Date(dateB);\r\n    },\r\n  },\r\n  {\r\n    name: \"Department\",\r\n    selector: (row) => row.department,\r\n    sortable: true,\r\n    sortFunction: (a, b) => a.department.localeCompare(b.department),\r\n  },\r\n  {\r\n    name: \"Date of Birth\",\r\n    selector: (row) => row.dateOfBirth,\r\n    sortable: true,\r\n    sortFunction: (a, b) => {\r\n      const dateA = a.dateOfBirth.split(\"/\").reverse().join(\"-\");\r\n      const dateB = b.dateOfBirth.split(\"/\").reverse().join(\"-\");\r\n      return new Date(dateA) - new Date(dateB);\r\n    },\r\n  },\r\n  {\r\n    name: \"Street\",\r\n    selector: (row) => row.street,\r\n    sortable: true,\r\n    sortFunction: (a, b) => a.street.localeCompare(b.street),\r\n  },\r\n  {\r\n    name: \"City\",\r\n    selector: (row) => row.city,\r\n    sortable: true,\r\n\r\n    sortFunction: (a, b) => a.city.localeCompare(b.city),\r\n  },\r\n  {\r\n    name: \"State\",\r\n    selector: (row) => row.state,\r\n    sortable: true,\r\n    sortFunction: (a, b) => a.state.localeCompare(b.state),\r\n  },\r\n  {\r\n    name: \"Zip Code\",\r\n    selector: (row) => row.zipCode,\r\n    sortable: true,\r\n    sortFunction: (a, b) => a.zipCode.localeCompare(b.zipCode),\r\n  },\r\n];\r\n","import React from \"react\";\r\n// external component\r\nimport ReactPaginate from \"react-paginate\";\r\n\r\n/**\r\n * @Composant de pagination.\r\n * @param {Object} props - Les propriétés du composant.\r\n * @param {number} props.pageCount - Le nombre total de pages.\r\n * @param {number} props.currentPage - La page actuelle.\r\n * @param {function} props.onPageChange - La fonction de gestion du changement de page.\r\n * @returns {JSX.Element}\r\n */\r\n\r\nconst Pagination = ({ pageCount, currentPage, onPageChange }) => {\r\n  const isFirstPage = currentPage === 0;\r\n  const isLastPage = currentPage === pageCount;\r\n\r\n  const previousLabel = isFirstPage ? <span>{\"<\"}</span> : \"<\";\r\n  const nextLabel = isLastPage ? <span>{\">\"}</span> : \">\";\r\n\r\n  return (\r\n    <ReactPaginate\r\n      pageCount={pageCount}\r\n      pageRangeDisplayed={5}\r\n      marginPagesDisplayed={2}\r\n      onPageChange={({ selected }) => onPageChange(selected)}\r\n      forcePage={currentPage}\r\n      containerClassName=\"pagination\"\r\n      pageClassName=\"page-item\"\r\n      activeClassName=\"active\"\r\n      nextLinkClassName={isLastPage ? \"hidden\" : \"\"}\r\n      previousLinkClassName={isFirstPage ? \"hidden\" : \"\"}\r\n      previousLabel={previousLabel}\r\n      nextLabel={nextLabel}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React, { useState } from \"react\";\r\n// external component\r\nimport SearchBox from \"react-search-box\";\r\n\r\n/**\r\n * @Composant recherche d'employé.\r\n * @param {Object} props - Les propriétés du composant.\r\n * @param {function} props.onSearch - Fonction appelée lors de la recherche.\r\n */\r\nconst EmployeeSearch = ({ onSearch }) => {\r\n  // État local pour la valeur de recherche\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n\r\n  // Gère les modifications de la valeur de recherche.\r\n  const handleSearch = (value) => {\r\n    setSearchValue(value); // Met à jour la valeur de recherche dans l'état local.\r\n    onSearch(value); // Appelle la fonction de rappel fournie avec la nouvelle valeur de recherche.\r\n  };\r\n\r\n  return (\r\n    <div className=\"search\">\r\n      <label htmlFor=\"search__input\">Recherchez un employé</label>\r\n      <SearchBox\r\n        id=\"search__input\"\r\n        placeholder=\"Entrez les lettres du nom...\"\r\n        value={searchValue}\r\n        onChange={handleSearch}\r\n        aria-label=\"Recherchez un employé\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployeeSearch;\r\n","/**\r\n * Styles personnalisés pour la table DataTable.\r\n * @typedef {Object} CustomStyles\r\n * @property {Object} table - Styles de la table.\r\n * @property {Object} headRow - Styles de la ligne d'en-tête.\r\n */\r\n\r\nexport const customStyles = {\r\n  table: {\r\n    style: {\r\n      width: \"80%\", // largeur de la table\r\n      margin: \"auto\", //marge pour centrer\r\n      marginBottom: \"80px\", // marge en bas\r\n    },\r\n  },\r\n\r\n  /**\r\n   * Styles de la ligne d'en-tête.\r\n   * @type {Object}\r\n   */\r\n  headRow: {\r\n    style: {\r\n      backgroundColor: \"#6f8f6f\", //fond en-tete\r\n      fontSize: \"16px\", //taille texte entete\r\n      color: \"white\", // Couleur du texte de la ligne d'en-tête\r\n      fontStyle: \"normal\", // style police\r\n    },\r\n  },\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport logo from \"assets/logo_sans_fond.png\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { columns } from \"data/column.js\";\r\n// Components\r\nimport Pagination from \"components/pagination/Pagination.js\";\r\nimport EmployeeSearch from \"components/search/EmployeeSearch.js\";\r\nimport { customStyles } from \"components/customDataTable/dataTableStyles.js\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport { FaTrashAlt } from \"react-icons/fa\";\r\nimport { clearEmployees } from \"redux/actions.js\";\r\n\r\n/**\r\n * @Composant pour afficher la liste des employés.\r\n * @returns {JSX.Element} Liste des employés.\r\n */\r\nconst ListEmployees = () => {\r\n  const dispatch = useDispatch();\r\n  const [currentPage, setCurrentPage] = useState(0);\r\n  const [itemsPerPage, setItemsPerPage] = useState(10);\r\n  const startIndex = currentPage * itemsPerPage;\r\n  const endIndex = startIndex + itemsPerPage;\r\n\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n\r\n  const employees = useSelector((state) => state.employees);\r\n  const mockEmployed = useSelector((state) => state.mockEmployed);\r\n\r\n  /**\r\n   * Gère la recherche d'employés en fonction de la valeur de recherche.\r\n   * @param {string} value - La valeur de recherche.\r\n   */\r\n  const handleSearch = (value) => {\r\n    setSearchValue(value);\r\n    setCurrentPage(0);\r\n  };\r\n\r\n  // Combiner à la fois les employés existants et les nouveaux employés\r\n  const allEmployees = [...employees, ...mockEmployed];\r\n\r\n  /**\r\n   * Filtre les employés en fonction de la valeur de recherche.\r\n   * @type {Array} Liste des employés filtrés.\r\n   */\r\n  const filteredItems = allEmployees.filter((employee) => {\r\n    const lastNameLowercase = employee.lastName.toLowerCase();\r\n    const searchValueLowercase = searchValue.toLowerCase();\r\n    return lastNameLowercase.startsWith(searchValueLowercase);\r\n  });\r\n\r\n  const displayedCurrentItems = filteredItems.slice(startIndex, endIndex);\r\n\r\n  // Réinitialise la page actuelle à 0 chaque fois que la valeur de recherche change.\r\n  useEffect(() => {\r\n    setCurrentPage(0);\r\n  }, [searchValue]);\r\n\r\n  // Gère le changement du nombre d'éléments par page.\r\n  const handleItemsPerPageChange = (event) => {\r\n    const { value } = event.target;\r\n    setItemsPerPage(parseInt(value, 10));\r\n    setCurrentPage(0);\r\n  };\r\n\r\n  // Gère la suppression de tous les employés.\r\n  const handleClearEmployees = () => {\r\n    dispatch(clearEmployees());\r\n  };\r\n\r\n  // Gérez la mise en page responsive de la DataTable ici\r\n  const responsiveColumns = columns.map((col) => ({\r\n    ...col,\r\n    minWidth: \"80px\",\r\n  }));\r\n\r\n  return (\r\n    <>\r\n      <section className=\"list\">\r\n        <h2 className=\"list__name\">HRNet</h2>\r\n        <img\r\n          className=\"list__logo\"\r\n          src={logo}\r\n          alt=\"logo appli\"\r\n          width={200}\r\n          height={170}\r\n        />\r\n        <div className=\"list__change\">\r\n          <h2 className=\"list__title\">List Employee</h2>\r\n          <button\r\n            onClick={handleClearEmployees}\r\n            className=\"list__delete\"\r\n            aria-label=\"Name\"\r\n          >\r\n            <FaTrashAlt />\r\n          </button>\r\n        </div>\r\n      </section>\r\n\r\n      <section className=\"pagination-search\">\r\n        <div className=\"pagination-search__toggle\">\r\n          <span>Nbre par page : </span>\r\n          <select\r\n            className=\"page\"\r\n            value={itemsPerPage}\r\n            onChange={handleItemsPerPageChange}\r\n          >\r\n            <option value=\"10\">10</option>\r\n            <option value=\"25\">25</option>\r\n            <option value=\"50\">50</option>\r\n            <option value=\"100\">100</option>\r\n          </select>\r\n        </div>\r\n        <div className=\"pagination-search__lot\">\r\n          <Pagination\r\n            pageCount={Math.ceil(filteredItems.length / itemsPerPage)}\r\n            currentPage={currentPage}\r\n            onPageChange={setCurrentPage}\r\n          />\r\n\r\n          <EmployeeSearch onSearch={handleSearch} />\r\n          <div className=\"pagination-search__number\">\r\n            {Math.min(filteredItems.length, endIndex)} / {filteredItems.length} salariés\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <DataTable\r\n        columns={responsiveColumns}\r\n        data={displayedCurrentItems}\r\n        customStyles={customStyles}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ListEmployees;\r\n","// pour update eventuel\r\n\r\n// export const setEmployee = (employeeData) => ({\r\n//   type: \"SET_EMPLOYEE\",\r\n//   employee: employeeData,\r\n// });\r\n\r\nexport const addEmployee = (employeeData) => ({\r\n  type: \"ADD_EMPLOYEE\",\r\n  payload: employeeData,\r\n});\r\n\r\nexport const clearEmployees = () => ({\r\n  type: \"CLEAR_EMPLOYEES\",\r\n});\r\n"],"names":["columns","name","selector","row","firstName","sortable","sortFunction","a","b","localeCompare","cell","_jsx","children","charAt","toUpperCase","slice","lastName","startDate","dateA","split","reverse","join","dateB","Date","department","dateOfBirth","street","city","state","zipCode","_ref","pageCount","currentPage","onPageChange","isFirstPage","isLastPage","previousLabel","nextLabel","ReactPaginate","pageRangeDisplayed","marginPagesDisplayed","_ref2","selected","forcePage","containerClassName","pageClassName","activeClassName","nextLinkClassName","previousLinkClassName","onSearch","_useState","useState","_useState2","_slicedToArray","searchValue","setSearchValue","_jsxs","className","htmlFor","SearchBox","id","placeholder","value","onChange","customStyles","table","style","width","margin","marginBottom","headRow","backgroundColor","fontSize","color","fontStyle","dispatch","useDispatch","setCurrentPage","_useState3","_useState4","itemsPerPage","setItemsPerPage","startIndex","endIndex","_useState5","_useState6","employees","useSelector","mockEmployed","filteredItems","concat","_toConsumableArray","filter","employee","lastNameLowercase","toLowerCase","searchValueLowercase","startsWith","displayedCurrentItems","useEffect","responsiveColumns","map","col","_objectSpread","minWidth","_Fragment","src","logo","alt","height","onClick","clearEmployees","FaTrashAlt","event","target","parseInt","Pagination","Math","ceil","length","EmployeeSearch","min","DataTable","data","addEmployee","employeeData","type","payload"],"sourceRoot":""}